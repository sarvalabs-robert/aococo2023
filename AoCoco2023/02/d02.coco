coco d02

// < invoke TEST.ReadGame(s: "Game 13: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green")
// > game: map[draws:[map[blue:3 green:0 red:4] map[blue:6 green:2 red:1] map[blue:0 green:2 red:0]] id:13]
// < invoke TEST.ReadGame(s:"Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red")
// > game: map[draws:[map[blue:1 green:2 red:0] map[blue:4 green:3 red:1]] id:2]
// < invoke TEST.ReadGame(s:"Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue")
// > game: map[draws:[map[blue:1 green:2 red:0] map[blue:4 green:3 red:1] map[blue:1 green:1 red:0]] id:2]
endpoint invokable ReadGame(s String) -> (game Game):
    game = game_from_string(s)

// < invoke TEST.ReadNumber(s: "12bc")
// > num:12 digits:2
// < invoke TEST.ReadNumber(s: "123")
// > num:123 digits:3
// < invoke TEST.ReadNumber(s: "x123")
// > !string::`x123` doesn't start with a number
// < invoke TEST.ReadNumber(s: "")
// > !string::`` doesn't start with a number
endpoint invokable ReadNumber(s String) -> (num U64, digits U64):
    num, digits = (num, digits) <- read_number(s)


// < invoke TEST.SumPossible(games: ["Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green", "Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue", "Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red", "Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red", "Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green"], lim_red: 12, lim_green: 13, lim_blue: 14)
// > sum:8
endpoint invokable SumPossible(games []String, lim_red U64, lim_green U64, lim_blue U64) -> (sum U64):
    var sum_ids U64
    var limits = RGB{blue: lim_blue, green: lim_green, red: lim_red}
    for _, s in games:
        var game = game_from_string(s)
        if (is_possible) <- game_is_possible(s, limits):
            sum_ids += game.id
    sum = sum_ids

// < invoke TEST.Power(s: "Game 13: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green")
// > pow: 48
endpoint invokable Power(s String) -> (pow U64):
    var game = game_from_string(s)
    pow = (pow) <- game.power()


// < invoke TEST.SumPowers(games: ["Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green", "Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue", "Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red", "Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red", "Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green"])
// > sum_pow:2286
endpoint invokable SumPowers(games []String) -> (sum_pow U64):
    var sum U64
    for i, s in games:
        var game = game_from_string(s)
        sum += (pow) <- game.power()
    sum_pow = sum